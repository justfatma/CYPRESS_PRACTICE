{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-19T17:19:48.865Z",
    "end": "2022-01-19T17:19:49.688Z",
    "duration": 823,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "43bd7410-2c2f-49ea-be92-d23885cdb568",
      "title": "",
      "fullFile": "cypress/integration/APItests/PostUser.js",
      "file": "cypress/integration/APItests/PostUser.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cafcfbad-a6e0-4b5a-9eae-9553c92b25c2",
          "title": "post user request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create user test",
              "fullTitle": "post user request create user test",
              "timedOut": null,
              "duration": 805,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var pattern = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\nfor (var i = 0; i < 10; i++) randomText += pattern.charAt(Math.floor(Math.random() * pattern.length));\ntestEmail = randomText + '@gmail.com'; //1. create user (POST)\ncy.request({\n  method: 'POST',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + accessToken\n  },\n  body: {\n    \"name\": dataJson.name,\n    \"gender\": dataJson.gender,\n    \"email\": testEmail,\n    \"status\": dataJson.status\n  }\n}).then(res => {\n  cy.log(JSON.stringify(res)); //show response data\n  expect(res.status).to.eq(201);\n  expect(res.body.data).has.property('email', testEmail);\n  expect(res.body.data).has.property('name', dataJson.name);\n  expect(res.body.data).has.property('status', dataJson.status);\n  expect(res.body.data).has.property('gender', dataJson.gender);\n}).then(res => {\n  const userId = res.body.data.id;\n  cy.log(\"user id is: \" + userId); //show user id on screen\n  //2. get user (GET)           get the inserted user to check fields\n  cy.request({\n    method: 'GET',\n    url: 'https://gorest.co.in/public/v1/users/' + userId,\n    headers: {\n      'Authorization': 'Bearer ' + accessToken\n    }\n  }).then(res => {\n    expect(res.status).to.eq(200);\n    expect(res.body.data).has.property('id', userId);\n    expect(res.body.data).has.property('name', dataJson.name);\n    expect(res.body.data).has.property('status', dataJson.status);\n    expect(res.body.data).has.property('email', testEmail);\n  });\n});",
              "err": {},
              "uuid": "75ac0341-f1d4-4d50-af66-b778bc24117b",
              "parentUUID": "cafcfbad-a6e0-4b5a-9eae-9553c92b25c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "75ac0341-f1d4-4d50-af66-b778bc24117b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 805,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "reportFilename": "report",
        "overwrite": false,
        "html": true,
        "json": true,
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}